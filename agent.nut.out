#require "Rocky.class.nut:1.3.0"
#require "PrettyPrinter.class.nut:1.0.1"







const CONCTR_MIN_RECONNECT_TIME = 5;

class Conctr {

    static VERSION = "1.3.0";

    
    static DATA_EVENT = "conctr_data";
    static LOCATION_REQ = "conctr_get_location";
    static AGENT_OPTS = "conctr_agent_options";
    static SOURCE_DEVICE = "impdevice";
    static SOURCE_AGENT = "impagent";
    static AMQP = "amqp";
    static MQTT = "mqtt";
    static MIN_TIME = 946684801; 
    static DEFAULT_LOC_INTERVAL = 3600; 
    static STREAM_TERMINATOR = "\r\n";
    static LOCAL_MODE = true;


    _api_key = null;
    _app_id = null;
    _device_id = null;
    _region = null;
    _env = null;
    _model = null;
    _rocky = null;
    _dataApiEndpoint = null;
    _pubSubEndpoints = null;

    
    _protocol = null;
    _msgQueue = null;

    
    _locationRecording = true;
    _locationSent = false;
    _locationTimeout = 0;
    _sendLocInterval = 0;
    _sendLocOnce = false;
    _pollingReq = null;

    _DEBUG = false;
    _LOCAL_FORWARDING = false;


    

    constructor(appId, apiKey, model_ref, rocky, opts = {}) {


        assert(typeof appId == "string");
        assert(typeof apiKey == "string");

        _app_id = appId;
        _api_key = (apiKey.find("api:") == null) ? "api:" + apiKey : apiKey;
        _model = model_ref;
        _region = ("region" in opts) ? opts.region : "us-west-2";
        _env = ("env" in opts) ? opts.env : "staging";
        _device_id = ("useAgentId" in opts && opts.useAgentId == true) ? split(http.agenturl(), "/").pop() : imp.configparams.deviceid;
        _rocky = rocky;
        _protocol = ("protocol" in opts && opts.protocol == AMQP) ? opts.protocol : "mqtt";


        
        _dataApiEndpoint = _formDataEndpointUrl(_app_id, _device_id, _region, _env);
        _pubSubEndpoints = _formPubSubEndpointUrls(_app_id, _api_key, _device_id, _region, _env);

        
        _setLocationOpts();

        
        _setupAgentApi(_rocky);

        
        _msgQueue = [];

        
        
        
        publishToDevice(imp.configparams.deviceid, "", "text/dummy");
        
        device.on(DATA_EVENT, sendData.bindenv(this));
        device.on(AGENT_OPTS, _setLocationOpts.bindenv(this));

    }

    
    function setDeviceId(deviceId = null) {
        _device_id = (deviceId == null) ? imp.configparams.deviceid : deviceId;
        _dataApiEndpoint = _formDataEndpointUrl(_app_id, _device_id, _region, _env);
    }


    
    function sendData(payload, callback = null) {

        
        if (typeof payload == "table") {
            payload = [payload];
        }

        
        local ids = [];
        local getLocation = true;

        if (typeof payload == "array") {

            
            foreach (k, v in payload) {
                if (typeof v != "table") {
                    throw "Conctr: Payload must contain a table or an array of tables";
                }

                if (!("_source" in v)) {
                    v._source <- SOURCE_AGENT;
                }

                
                v._model <- _model;

                local shortTime = false;

                if (("_ts" in v) && (typeof v._ts == "integer")) {

                    
                    if (v._ts < MIN_TIME) {
                        shortTime = true;
                    }
                } else if (("_ts" in v) && (typeof v._ts == "string")) {

                    local isNumRegex = regexp("^[0-9]*$");

                    
                    local isNumerical = (isNumRegex.capture(v._ts) != null);

                    if (isNumerical == true) {
                        
                        if (v._ts.len() <= 10 && v._ts.tointeger() < MIN_TIME) {
                            shortTime = true;
                        } else if (v._ts.len() > 10 && v._ts.tointeger() / 1000 < MIN_TIME) {
                            shortTime = true;
                        }
                    }
                } else {
                    
                    v._ts <- time();
                }

                if (shortTime) {
                    server.log("Conctr: Warning _ts must be after 1st Jan 2000. Setting to imps time() function.")
                    v._ts <- time();
                }

                if ("_location" in v) {

                    
                    getLocation = false;

                    if (!_locationSent) {
                        
                        _locationSent = true;
                        _locationTimeout = time() + _sendLocInterval;
                    }

                }

                
                if ("_id" in v) {
                    ids.push(v._id);
                    delete v._id;
                }

            }

            
            _postToConctr(payload, _dataApiEndpoint, ids, callback);

            
            if (getLocation) _getLocation();

        } else {
            
            throw "Conctr: Payload must contain a table or an array of tables";
        }

    }

    
    function setProtocol(protocol) {
        if (protocol == AMQP || protocol == MQTT) {
            _protocol = protocol;
        } else {
            server.error(protocol + " is not a valid protocol.");
        }
        _pubSubEndpoints = _formPubSubEndpointUrls(_app_id, _api_key, _device_id, _region, _env);
        return _protocol
    }

    
    
    
    function publish(topic, msg, contentType = null, cb = null) {
        local relativeUrl = "/" + topic;
        _publish(relativeUrl, msg, contentType, cb);

    }

    
    
    function publishToDevice(deviceId, msg, contentType = null, cb = null) {
        local relativeUrl = "/dev/" + deviceId;
        _publish(relativeUrl, msg, contentType, cb);
    }

    
    function publishToService(serviceName, msg, contentType = null, cb = null) {
        local relativeUrl = "/sys/" + serviceName;
        _publish(relativeUrl, msg, contentType, cb);
    }


    
    
    function subscribe(topics = [], cb = null) {

        if (typeof topics == "function") {
            cb = topics;
            topics = [];
        }
        if (typeof topics != "array") {
            topics = [topics];
        }

        local action = "subscribe";
        local headers = {};
        local payload = {};
        local chunks = "";
        local contentLength = null;
        local reqTime = time();

        
        local _doneCb = function(resp) {
            
            
            if (resp.body == null && resp.body == "") {
                _streamCb(resp.body);
            }

            local wakeupTime = 0;
            local reconnect = function() {
                subscribe(topics, cb);
            }

            if (resp.statuscode >= 200 && resp.statuscode <= 300) {
                
            } else if (resp.statuscode == 429) {
                wakeupTime = 1;
            } else {
                local conTime = time() - reqTime;
                if (conTime < CONCTR_MIN_RECONNECT_TIME) {
                    wakeupTime = CONCTR_MIN_RECONNECT_TIME - conTime;
                }
            }
            
            imp.wakeup(wakeupTime, reconnect.bindenv(this));
        };

        
        local _streamCb = function(chunk) {
            server.log("got chunk " + chunk);
            
            if (_pollingReq == null) return;

            
            chunks += chunk;

            
            if (contentLength == null) {
                
                
                local eos = chunks.find(STREAM_TERMINATOR);
                
                if (eos != null) {
                    
                    contentLength = chunks.slice(0, eos);
                    contentLength = contentLength.tointeger();

                    
                    chunks = chunks.slice(eos + STREAM_TERMINATOR.len());
                }
                
            }

            if (contentLength != null && chunks.len() >= contentLength) {
                
                _processData(chunks.slice(0, contentLength), cb);

                
                chunks = chunks.slice(contentLength + STREAM_TERMINATOR.len());
                contentLength = null;
            }
        }

        headers["Content-Type"] <- "application/json";
        headers["Connection"] <- "keep-alive";
        headers["Transfer-encoding"] <- "chunked";
        payload["topics"] <- topics;

        
        if (_pollingReq) _pollingReq.cancel();

        _pollingReq = http.post(_pubSubEndpoints[action] + "/" + _device_id, headers, http.jsonencode(payload));

        
        _pollingReq.sendasync(_doneCb.bindenv(this), _streamCb.bindenv(this));
    }


    
    
    function unsubscribe() {
        if (_pollingReq) _pollingReq.cancel();
        _pollingReq = null;
    }

    
    
    
    function _publish(relativeUrl, msg, contentType = null, cb = null) {
        local action = "publish";
        local headers = {};
        local reqTime = time();

        if (typeof contentType == "function") {
            cb = contentType;
            contentType = null;
        }

        if (contentType == null || typeof msg != "string") {
            msg = http.jsonencode(msg);
            contentType = "application/json";
        }

        headers["Content-Type"] <- contentType;

        local request = http.post(_pubSubEndpoints[action] + relativeUrl, headers, msg);
        request.sendasync(function(resp) {
            local wakeupTime = 0;
            if (resp.statuscode >= 200 && resp.statuscode <= 300) {
                if (cb) cb(response);
            } else if (resp.statuscode == 429) {
                wakeupTime = 1;
            } else {
                local conTime = time() - reqTime;
                if (conTime < CONCTR_MIN_RECONNECT_TIME) {
                    wakeupTime = CONCTR_MIN_RECONNECT_TIME - conTime;
                }
            }
            
            if (wakeupTime) {
                _retry(wakeupTime, function() {
                    _publish(relativeUrl, msg, contentType, cb);
                }.bindenv(this))
            }


        }.bindenv(this))
    }
    
    function _retry(wakeupTime, func) {
        _msgQueue.push({ "wakeupTime": wakeupTime, "cb": func });
    }


    
    function _processData(chunks, cb) {
        local response = _decode(chunks);
        if (response.headers["content-type"] != "text/dummy") {
            imp.wakeup(0, function() {
                cb(response);
            }.bindenv(this));
        } else {
            server.log("Recieved the dummy message");
        }
        return;
    }


    
    function _decode(encodedMsg) {
        local decoded = {};
        local headerEnd = encodedMsg.find("\n\n");
        local encodedHeader = encodedMsg.slice(0, headerEnd);
        local encodedBody = encodedMsg.slice(headerEnd + "\n\n".len());
        decoded.headers <- _parseHeaders(encodedHeader);
        decoded.body <- _parseBody(encodedBody, decoded.headers);
        return decoded;
    }


    
    function _parseHeaders(encodedHeader) {
        local headerArr = split(encodedHeader, "\n");
        local headers = {}
        foreach (i, header in headerArr) {
            local keyValArr = split(header, ":");
            keyValArr[0] = strip(keyValArr[0]);
            if (keyValArr[0].len() > 0) {
                headers[keyValArr[0].tolower()] <- strip(keyValArr[1]);
            }
        }
        return headers;
    }


    
    function _parseBody(encodedBody, headers) {

        local body = encodedBody;
        if ("content-type" in headers && headers["content-type"] == "application/json") {
            try {
                body = http.jsondecode(encodedBody);
            } catch (e) {
                server.error(e)
            }
        }
        return body;
    }


    
    function _postToConctr(payload, endpoint, ids = [], callback = null) {

        if (typeof ids == "function") {
            callback = ids;
            ids = [];
        }

        local headers = {};
        headers["Content-Type"] <- "application/json";

        headers["Authorization"] <- _api_key;

        
        if (_DEBUG) {
            server.log(format("Conctr: sending to %s", endpoint));
            server.log(format("Conctr: %s", http.jsonencode(payload)));
        }

        local request = http.post(endpoint, headers, http.jsonencode(payload));

        request.sendasync(function(response) {
            
            local success = (response.statuscode >= 200 && response.statuscode < 300);
            local body = null, error = null;

            
            if (typeof response.body == "string" && response.body.len() > 0) {
                try {
                    body = http.jsondecode(response.body)

                    if ("error" in body) error = body.error;

                } catch (e) {
                    error = e;
                }
            }

            
            if (success == false && error == null) {
                error = "Http Status Code: " + response.statuscode;
            }


            if (_DEBUG) {
                if (error) server.error("Conctr Error: " + http.jsonencode(error));
                else if (body) server.log("Conctr: " + http.jsonencode(body));
            }

            if (error != null) {
                server.error("Conctr Error: " + error);
            }

            
            if (callback) {
                callback(error, body);
            }

            
            if (ids.len() > 0) {
                
                local device_result = { "ids": ids, "body": body, "error": error };
                device.send(DATA_EVENT, device_result);
            }

        }.bindenv(this));
    }

    
    function _getLocation() {

        if (!_locationRecording) {

            if (_DEBUG) {
                server.log("Conctr: location recording is not enabled");
            }

            
            return;

        } else {

            
            local now = time();
            if ((_locationSent == false) || ((_sendLocOnce == false) && (_locationTimeout - now < 0))) {

                if (_DEBUG) {
                    server.log("Conctr: requesting location from device");
                }

                
                _locationTimeout = time() + _sendLocInterval;

                
                _locationSent = true;

                
                device.send(LOCATION_REQ, "");

            } else {
                
                return;
            }
        }
    }

    
    function _setLocationOpts(opts = {}) {

        if (_DEBUG) {
            server.log("Conctr: setting agent opts to: " + http.jsonencode(opts));
        }

        _sendLocInterval = ("sendLocInterval" in opts && opts.sendLocInterval != null) ? opts.sendLocInterval : DEFAULT_LOC_INTERVAL; 

        _sendLocOnce = ("sendLocOnce" in opts && opts.sendLocOnce != null) ? opts.sendLocOnce : false;
        _locationRecording = ("sendLoc" in opts && opts.sendLoc != null) ? opts.sendLoc : _locationRecording;
        _locationSent = false;
    }

    
    function _setupAgentApi(rocky) {
        server.log("set up agent endpoints");
        rocky.post("/conctr/claim", _handleClaimReq.bindenv(this));
    }

    
    function _handleClaimReq(context) {


        if (!("consumer_jwt" in context.req.body)) {
            return _sendResponse(context, 401, { "error": "'consumer_jwt' is a required paramater for this request" });
        }

        _claimDevice(_app_id, _device_id, context.req.body.consumer_jwt, _region, _env, function(err, resp) {
            if (err != null) {
                return _sendResponse(context, 400, { "error": err });
            }
            server.log("Conctr: Device claimed");
            _sendResponse(context, 200, resp);
        });

    }

    
    function _sendResponse(context, code, obj = {}) {
        context.send(code, obj)
    }

    
    function _claimDevice(appId, deviceId, consumer_jwt, region, env, cb = null) {

        local _claimEndpoint = format("https://api.%s.conctr.com/admin/apps/%s/devices/%s/claim", env, appId, deviceId);
        local payload = {};

        payload["consumer_jwt"] <- consumer_jwt;

        _postToConctr(payload, _claimEndpoint, cb)
    }

    
    function _formDataEndpointUrl(appId, deviceId, region, env) {

        
        return format("https://api.%s.conctr.com/data/apps/%s/devices/%s", env, appId, deviceId);

        
        
    }


    
    function _formPubSubEndpointUrls(appId, apiKey, deviceId, region, env) {

        local pubSubActions = ["subscribe", "publish"];
        local ngrokID = "92ed6e26";
        local endpoints = {};
        foreach (idx, action in pubSubActions) {
            if (!LOCAL_MODE) {
                endpoints[action] <- format("https://api.%s.conctr.com/comet/%s/%s/%s/%s", env, _protocol, action, appId, apiKey);
            } else {
                endpoints[action] <- format("http://%s.ngrok.io/comet/%s/%s/%s/%s", ngrokID, _protocol, action, appId, apiKey);
            }
            
            
        }
        return endpoints;
    }
}
const htmlString = @"

<!DOCTYPE html>
<html>
    <head>
        <title>Environment Data</title>
        <link rel='stylesheet' href='https://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css'>
        <meta name='viewport' content='width=device-width, initial-scale=1.0'>
        <style>
            .center { margin-left: auto; margin-right: auto; margin-bottom: auto; margin-top: auto; }
        </style>
    </head>
    <body>
        <div class='container'>
            <h2 class='text-center'>User Settings</h2>
            <br>
            <div class='controls'>
                <div class='update-button'>
                    <form id='config-form'> 
                        <div>
                            <label>Tap Sensitivity(Gs):</label>&nbsp;<input id='tapSensitivity'></input>
                            <input type= 'checkbox' id ='tapEnabled' name='tapEnabled' value='tapEnabled'>Tap Enabled</input>
                        </div>
                        <div>
                            <label>Poll Frequency 1:</label>&nbsp;<input id='pollFreq1'></input>
                        </div>
                        <div>
                            <label>Poll Frequency 2:</label>&nbsp;<input id='pollFreq2'></input>
                        </div>
                        <div>
                            <label>Poll Frequency 3:</label>&nbsp;<input id='pollFreq3'></input>
                        </div>
                        <div>
                            <label>Poll Frequency 4:</label>&nbsp;<input id='pollFreq4'></input>
                        </div>                                                
                        <div>
                            <label>Poll Frequency 5:</label>&nbsp;<input id='pollFreq5'></input>
                        </div>
                        <div>LED Settings
                            <div>
                                <label>Blue LED Duration(0-5s):</label>&nbsp;<input id='blue'></input>
                                <input type= 'checkbox' id ='LED_Blue_Enabled' name='LED' value='LED_Blue_Enabled'>LED Blue Enabled</input>
                            </div>
                            <div>
                                <label>Green LED Duration(0-5s):</label>&nbsp;<input id='green'></input>
                                <input type= 'checkbox' id ='LED_Green_Enabled' name='LED' value='LED_Green_Enabled'>LED Green Enabled</input>
                            </div>
                        </div>
                        <div>
                            <button type='submit' id='update-button'>Update Config</button>
                            <label id='submitResult'></label>
                        </div>   
                        
                    </form>
                </div>
                
            </div> <!-- controls -->
            <br>
            <small>From: %s</small>
        </div>  <!-- container -->
        <script src='https://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js'></script>
        <script>
            var agenturl = '%s';
            getState(updateReadout);
            $('.update-button button').on('click', getStateInput);
            function getStateInput(e){
                e.preventDefault();
                var tapEnabled = document.getElementById('tapEnabled').value;
                var tapSensitivity = document.getElementById('tapSensitivity').value;
                var pollFreq1 = document.getElementById('pollFreq1').value;
                var pollFreq2 = document.getElementById('pollFreq2').value;
                var pollFreq3 = document.getElementById('pollFreq3').value;
                var pollFreq4 = document.getElementById('pollFreq4').value;
                var pollFreq5 = document.getElementById('pollFreq5').value;
                //var red = document.getElementById('red').value;
                var green = document.getElementById('green').value;
                var blue = document.getElementById('blue').value;
                var ledGreenEnabled = document.getElementById('LED_Green_Enabled').checked;
                var ledBlueEnabled = document.getElementById('LED_Blue_Enabled').checked;
                var config = {'tapSensitivity': tapSensitivity, 'tapEnabled': tapEnabled, 'pollFreq1': pollFreq1, 'pollFreq2': pollFreq2, 'pollFreq3': pollFreq3, 'pollFreq4': pollFreq4,'pollFreq5': pollFreq5, 'blue': blue, 'green': green, 'ledGreenEnabled': ledGreenEnabled,'ledBlueEnabled': ledBlueEnabled};
                setConfig(config);
                $('#name-form').trigger('reset');
            }
            function updateReadout(data) {
                $('#tapSensitivity').val(data.tapSensitivity);
                $('#tapEnabled').prop('checked', data.tapEnabled);
                $('#pollFreq1').val(data.pollFreq1);
                $('#pollFreq2').val(data.pollFreq2);
                $('#pollFreq3').val(data.pollFreq3);
                $('#pollFreq4').val(data.pollFreq4);
                $('#pollFreq5').val(data.pollFreq5);
                $('#green').val(data.green);
                $('#blue').val(data.blue);
                $('#LED_Blue_Enabled').prop('checked', data.ledBlueEnabled);
                $('#LED_Green_Enabled').prop('checked', data.ledGreenEnabled);        
                setTimeout(function() {
                    getState(updateReadout);
                }, 120000);
            }
            function getState(callback) {
                $.ajax({
                    url : agenturl + '/state',
                    type: 'GET',
                    success : function(response) {
                        if (callback && ('temperature' in response)) {
                            callback(response);
                        }
                    }
                });
            }
            function setConfig(config) {
                $.ajax({
                    url : agenturl + '/config',
                    type: 'POST',
                    data: JSON.stringify(config),
                    success : function(response) {
                        console.log('success sending to agent');
                        $('#submitResult').text('Success');
                    }
                });
            }
        </script>
    </body>
</html>
"
;

const DEFAULT_POLLFREQ1 = 172800;
const DEFAULT_POLLFREQ2 = 86400
const DEFAULT_POLLFREQ3 = 18000;
const DEFAULT_POLLFREQ4 = 3600;
const DEFAULT_POLLFREQ5 = 900;


const APP_ID = "376f9f5f751e4cd2b7e3fb02d7a1fb90";
const API_KEY = "e1871d42-6580-41a6-a13d-8086df8cfb35";
const MODEL = "environment_sensor:v1";

class environmentSensor {
	savedData = {};

	constructor() {
		savedData = {"temperature": null,
				 "humidity": null,
				 "pressure": null,
				 "battery": null,
				 "acceleration_x": null,
				 "acceleration_y": null,
				 "acceleration_z": null,
				 "tapSensitivity": 2,
				 "tapEnabled": true,
				 "pollFreq1": DEFAULT_POLLFREQ1,
				 "pollFreq2": DEFAULT_POLLFREQ2,
				 "pollFreq3": DEFAULT_POLLFREQ3,
				 "pollFreq4": DEFAULT_POLLFREQ4,
				 "pollFreq5": DEFAULT_POLLFREQ5,
				 "blue": 1,
				 "green": 1,
				 "ledBlueEnabled": true,
				 "ledGreenEnabled": true}; 

		
		if (backup.len() != 0) {
		    savedData = backup;
		} else {
		    local result = server.save(savedData);
		    if (result != 0) server.error("Could not back up data");
		}
	}
	
	function postReading(reading) {
		
		conctr.sendData(reading, function(error,response) {
            server.log("Conct Data Sent");
            if(error) {
                server.error(error); 
            } else {
                server.log(response.statusCode); 
            }
        }.bindenv(this));
	}


}




api <- Rocky();
pp <- PrettyPrinter(null, false);
print <- pp.print.bindenv(pp);
conctr <- Conctr(APP_ID, API_KEY, MODEL,api, {"env": "dev"});
backup <- server.load();


envSens <- environmentSensor();



api.get("/", function(context) {
    
    context.send(200, format(htmlString, http.agenturl(), http.agenturl()));
});

api.get("/state", function(context) {
    
    context.send(200, { 
    	temperature = envSens.savedData.temperature, 
    	humidity = envSens.savedData.humidity, 
    	pressure = envSens.savedData.pressure, 
    	battery = envSens.savedData.battery, 
    	tapSensitivity = envSens.savedData.tapSensitivity, 
    	tapEnabled = envSens.savedData.tapEnabled, 
    	pollFreq1 = envSens.savedData.pollFreq1,
	    pollFreq2 = envSens.savedData.pollFreq2, 
	    pollFreq3 = envSens.savedData.pollFreq3, 
	    pollFreq4 = envSens.savedData.pollFreq4, 
	    pollFreq5 = envSens.savedData.pollFreq5,  
	    blue = envSens.savedData.blue, 
	    green = envSens.savedData.green 
	    ledBlueEnabled = envSens.savedData.ledBlueEnabled,
	    ledGreenEnabled = envSens.savedData.ledGreenEnabled
	    });
});

api.post("/config", function(context) {
    
    local data = http.jsondecode(context.req.rawbody);    
    envSens.savedData.tapSensitivity = data.tapSensitivity.tointeger();
    envSens.savedData.tapEnabled = data.tapEnabled;
    envSens.savedData.pollFreq1 = data.pollFreq1.tointeger();
    envSens.savedData.pollFreq2 = data.pollFreq2.tointeger();
    envSens.savedData.pollFreq3 = data.pollFreq3.tointeger();
    envSens.savedData.pollFreq4 = data.pollFreq4.tointeger();
    envSens.savedData.pollFreq5 = data.pollFreq5.tointeger();
    envSens.savedData.blue = data.blue.tointeger();
    envSens.savedData.green = data.green.tointeger();
    envSens.savedData.ledBlueEnabled = data.ledBlueEnabled;
    envSens.savedData.ledGreenEnabled = data.ledGreenEnabled;     
    local result = server.save(envSens.savedData);
    if (result != 0) server.error("Could not back up data");
    context.send(200, "OK");
});


device.on("reading", envSens.postReading);
device.on("ready", function(msg) {    
    device.send("config", envSens.savedData);
});


